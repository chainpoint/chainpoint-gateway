/* global describe, it beforeEach, afterEach */

process.env.NODE_ENV = 'test'

// test related packages
const expect = require('chai').expect
const request = require('supertest')
const fs = require('fs')

const app = require('../lib/api-server.js')
const verify = require('../lib/endpoints/verify.js')
const cpb = require('chainpoint-binary')

describe('Verify Controller', () => {
  let insecureServer = null
  beforeEach(async () => {
    insecureServer = await app.startInsecureRestifyServerAsync()
    beforeEach(() => {
      verify.setENV({ POST_VERIFY_PROOFS_MAX: 1 })
    })
    verify.setCores({
      getCachedTransactionAsync: async txId => {
        switch (txId) {
          case '8c683710cba1c03abbb8aea43d20872e67def601abcc629775e3f3d03742f7b6': {
            return { tx: { data: 'c8026462e34d40ef2de5cad4f7b2a4f890efe8eef6cf70ac62492b3a7b1705fa' } }
          }
          case '018b83991cd76e3ad470793cd5c7ab9122ddbbda3ad290bbc6bd7bfd37c9de3a': {
            return { tx: { data: '7ba30094f928110067d50cb95b4707e7579c582b1d865c9e7868d282fddb95f9' } }
          }
          default: {
            return { tx: { data: '' } }
          }
        }
      }
    })
  })
  afterEach(() => {
    insecureServer.close()
  })

  describe('POST /verify mainnet', () => {
    beforeEach(() => {
      verify.setENV({ POST_VERIFY_PROOFS_MAX: 1, NETWORK: 'mainnet' })
    })
    it('should return the proper error with bad content type', done => {
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'text/plain')
        .expect('Content-type', /json/)
        .expect(409)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.have.property('code')
            .and.to.be.a('string')
            .and.to.equal('InvalidArgument')
          expect(res.body)
            .to.have.property('message')
            .and.to.be.a('string')
            .and.to.equal('Invalid content type')
          done()
        })
    })

    it('should return the proper error with missing proofs property', done => {
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .expect('Content-type', /json/)
        .expect(409)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.have.property('code')
            .and.to.be.a('string')
            .and.to.equal('InvalidArgument')
          expect(res.body)
            .to.have.property('message')
            .and.to.be.a('string')
            .and.to.equal('Invalid JSON body, missing proofs')
          done()
        })
    })

    it('should return the proper error with proofs not an array', done => {
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: 'notarray' })
        .expect('Content-type', /json/)
        .expect(409)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.have.property('code')
            .and.to.be.a('string')
            .and.to.equal('InvalidArgument')
          expect(res.body)
            .to.have.property('message')
            .and.to.be.a('string')
            .and.to.equal('Invalid JSON body, proofs is not an Array')
          done()
        })
    })

    it('should return the proper error with empty proofs array', done => {
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [] })
        .expect('Content-type', /json/)
        .expect(409)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.have.property('code')
            .and.to.be.a('string')
            .and.to.equal('InvalidArgument')
          expect(res.body)
            .to.have.property('message')
            .and.to.be.a('string')
            .and.to.equal('Invalid JSON body, proofs Array is empty')
          done()
        })
    })

    it('should return the proper error with max proofs exceeded', done => {
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: ['p1', 'p2'] })
        .expect('Content-type', /json/)
        .expect(409)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.have.property('code')
            .and.to.be.a('string')
            .and.to.equal('InvalidArgument')
          expect(res.body)
            .to.have.property('message')
            .and.to.be.a('string')
            .and.to.equal(`Invalid JSON body, proofs Array max size of 1 exceeded`)
          done()
        })
    })

    it('should return successful result with malformed proof', done => {
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: ['p1'] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('malformed')
          done()
        })
    })

    it('should return successful result with bad network proof', done => {
      let tcalProof = JSON.parse(fs.readFileSync('./tests/sample-data/tcal-proof-v4.chp.json'))
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [tcalProof] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal(
              `This is a 'mainnet' Gateway supporting 'cal' and 'btc' anchor types. Cannot verify 'tcal' anchors.`
            )
          done()
        })
    })

    it('should return successful result with invalid cal proof (json)', done => {
      let calProof = JSON.parse(fs.readFileSync('./tests/sample-data/cal-proof-v4.chp.json'))
      calProof.hash = 'badf27222fe366d0b8988b7312c6ba60ee422418d92b62cdcb71fe2991ee7391'
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [calProof] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(calProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(calProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(calProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(1)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('cal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(false)
          expect(res.body[0].anchors[0])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('invalid')
          done()
        })
    })

    it('should return successful result with invalid btc proof (json)', done => {
      let btcProof = JSON.parse(fs.readFileSync('./tests/sample-data/btc-proof-v4.chp.json'))
      btcProof.hash = 'badf27222fe366d0b8988b7312c6ba60ee422418d92b62cdcb71fe2991ee7391'
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [btcProof] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(btcProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(2)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('cal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(false)
          expect(res.body[0].anchors[0])
          expect(res.body[0].anchors[1]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[1]).length).to.equal(3)
          expect(res.body[0].anchors[1])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('btc_anchor_branch')
          expect(res.body[0].anchors[1])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('btc')
          expect(res.body[0].anchors[1])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(false)
          expect(res.body[0].anchors[1])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('invalid')
          done()
        })
    })

    it('should return successful result with valid cal proof (json)', done => {
      let calProof = JSON.parse(fs.readFileSync('./tests/sample-data/cal-proof-v4.chp.json'))
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [calProof] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(calProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(calProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(calProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(1)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('cal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(true)
          expect(res.body[0].anchors[0])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('verified')
          done()
        })
    })

    it('should return successful result with valid btc proof (json)', done => {
      let btcProof = JSON.parse(fs.readFileSync('./tests/sample-data/btc-proof-v4.chp.json'))
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [btcProof] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(btcProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(2)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('cal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(true)
          expect(res.body[0].anchors[0])
          expect(res.body[0].anchors[1]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[1]).length).to.equal(3)
          expect(res.body[0].anchors[1])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('btc_anchor_branch')
          expect(res.body[0].anchors[1])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('btc')
          expect(res.body[0].anchors[1])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(true)
          expect(res.body[0].anchors[1])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('verified')
          done()
        })
    })

    it('should return successful result with mixed (cal ok, btc bad) btc proof (json)', done => {
      let btcProof = JSON.parse(fs.readFileSync('./tests/sample-data/btc-proof-v4.chp.json'))
      btcProof.branches[0].branches[0].branches[0].ops[0].l =
        'bad0cff025777bec277cd3a0599eaf5efbeb1ea7adf5ec5a39126a77fa57f837'
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [btcProof] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(btcProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(2)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('cal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(true)
          expect(res.body[0].anchors[0])
          expect(res.body[0].anchors[1]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[1]).length).to.equal(3)
          expect(res.body[0].anchors[1])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('btc_anchor_branch')
          expect(res.body[0].anchors[1])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('btc')
          expect(res.body[0].anchors[1])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(false)
          expect(res.body[0].anchors[1])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('mixed')
          done()
        })
    })

    it('should return successful result with invalid cal proof (b64)', done => {
      let calProof = JSON.parse(fs.readFileSync('./tests/sample-data/cal-proof-v4.chp.json'))
      calProof.hash = 'badf27222fe366d0b8988b7312c6ba60ee422418d92b62cdcb71fe2991ee7391'
      let calProofB64 = cpb.objectToBase64Sync(calProof)
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [calProofB64] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(calProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(calProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(calProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(1)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('cal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(false)
          expect(res.body[0].anchors[0])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('invalid')
          done()
        })
    })

    it('should return successful result with invalid btc proof (b64)', done => {
      let btcProof = JSON.parse(fs.readFileSync('./tests/sample-data/btc-proof-v4.chp.json'))
      btcProof.hash = 'badf27222fe366d0b8988b7312c6ba60ee422418d92b62cdcb71fe2991ee7391'
      let btcProofB64 = cpb.objectToBase64Sync(btcProof)
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [btcProofB64] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(btcProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(2)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('cal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(false)
          expect(res.body[0].anchors[0])
          expect(res.body[0].anchors[1]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[1]).length).to.equal(3)
          expect(res.body[0].anchors[1])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('btc_anchor_branch')
          expect(res.body[0].anchors[1])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('btc')
          expect(res.body[0].anchors[1])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(false)
          expect(res.body[0].anchors[1])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('invalid')
          done()
        })
    })

    it('should return successful result with valid cal proof (b64)', done => {
      let calProof = JSON.parse(fs.readFileSync('./tests/sample-data/cal-proof-v4.chp.json'))
      let calProofB64 = cpb.objectToBase64Sync(calProof)
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [calProofB64] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(calProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(calProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(calProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(1)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('cal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(true)
          expect(res.body[0].anchors[0])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('verified')
          done()
        })
    })

    it('should return successful result with valid btc proof (b64)', done => {
      let btcProof = JSON.parse(fs.readFileSync('./tests/sample-data/btc-proof-v4.chp.json'))
      let btcProofB64 = cpb.objectToBase64Sync(btcProof)
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [btcProofB64] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(btcProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(2)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('cal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(true)
          expect(res.body[0].anchors[0])
          expect(res.body[0].anchors[1]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[1]).length).to.equal(3)
          expect(res.body[0].anchors[1])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('btc_anchor_branch')
          expect(res.body[0].anchors[1])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('btc')
          expect(res.body[0].anchors[1])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(true)
          expect(res.body[0].anchors[1])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('verified')
          done()
        })
    })

    it('should return successful result with mixed (cal ok, btc bad) btc proof (b64)', done => {
      let btcProof = JSON.parse(fs.readFileSync('./tests/sample-data/btc-proof-v4.chp.json'))
      btcProof.branches[0].branches[0].branches[0].ops[0].l =
        'bad0cff025777bec277cd3a0599eaf5efbeb1ea7adf5ec5a39126a77fa57f837'
      let btcProofB64 = cpb.objectToBase64Sync(btcProof)
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [btcProofB64] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(btcProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(btcProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(2)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('cal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(true)
          expect(res.body[0].anchors[0])
          expect(res.body[0].anchors[1]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[1]).length).to.equal(3)
          expect(res.body[0].anchors[1])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('btc_anchor_branch')
          expect(res.body[0].anchors[1])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('btc')
          expect(res.body[0].anchors[1])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(false)
          expect(res.body[0].anchors[1])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('mixed')
          done()
        })
    })
  })

  describe('POST /verify testnet', () => {
    beforeEach(() => {
      verify.setENV({ POST_VERIFY_PROOFS_MAX: 1, NETWORK: 'testnet' })
    })

    it('should return successful result with bad network proof', done => {
      let calProof = JSON.parse(fs.readFileSync('./tests/sample-data/cal-proof-v4.chp.json'))
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [calProof] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal(
              `This is a 'testnet' Gateway supporting 'tcal' and 'tbtc' anchor types. Cannot verify 'cal' anchors.`
            )
          done()
        })
    })

    it('should return successful result with invalid tbtc proof (json)', done => {
      let tbtcProof = JSON.parse(fs.readFileSync('./tests/sample-data/tbtc-proof-v4.chp.json'))
      tbtcProof.hash = 'badf27222fe366d0b8988b7312c6ba60ee422418d92b62cdcb71fe2991ee7391'
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [tbtcProof] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(tbtcProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(tbtcProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(tbtcProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(2)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('tcal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(false)
          expect(res.body[0].anchors[0])
          expect(res.body[0].anchors[1]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[1]).length).to.equal(3)
          expect(res.body[0].anchors[1])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('btc_anchor_branch')
          expect(res.body[0].anchors[1])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('tbtc')
          expect(res.body[0].anchors[1])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(false)
          expect(res.body[0].anchors[1])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('invalid')
          done()
        })
    })

    it('should return successful result with valid tbtc proof (json)', done => {
      let tbtcProof = JSON.parse(fs.readFileSync('./tests/sample-data/tbtc-proof-v4.chp.json'))
      request(insecureServer)
        .post('/verify')
        .set('Content-type', 'application/json')
        .send({ proofs: [tbtcProof] })
        .expect('Content-type', /json/)
        .expect(200)
        .end((err, res) => {
          expect(err).to.equal(null)
          expect(res.body)
            .to.be.a('array')
            .and.to.have.length(1)
          expect(res.body[0])
            .to.have.property('proof_index')
            .and.to.be.a('number')
            .and.to.equal(0)
          expect(res.body[0])
            .to.have.property('hash')
            .and.to.be.a('string')
            .and.to.equal(tbtcProof.hash)
          expect(res.body[0])
            .to.have.property('proof_id')
            .and.to.be.a('string')
            .and.to.equal(tbtcProof.proof_id)
          expect(res.body[0])
            .to.have.property('hash_received')
            .and.to.be.a('string')
            .and.to.equal(tbtcProof.hash_received)
          expect(res.body[0])
            .to.have.property('anchors')
            .and.to.be.a('array')
          expect(res.body[0].anchors).to.have.length(2)
          expect(res.body[0].anchors[0]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[0]).length).to.equal(3)
          expect(res.body[0].anchors[0])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('cal_anchor_branch')
          expect(res.body[0].anchors[0])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('tcal')
          expect(res.body[0].anchors[0])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(true)
          expect(res.body[0].anchors[0])
          expect(res.body[0].anchors[1]).to.be.a('object')
          expect(Object.keys(res.body[0].anchors[1]).length).to.equal(3)
          expect(res.body[0].anchors[1])
            .to.have.property('branch')
            .and.to.be.a('string')
            .and.to.equal('btc_anchor_branch')
          expect(res.body[0].anchors[1])
            .to.have.property('type')
            .and.to.be.a('string')
            .and.to.equal('tbtc')
          expect(res.body[0].anchors[1])
            .to.have.property('valid')
            .and.to.be.a('boolean')
            .and.to.equal(true)
          expect(res.body[0].anchors[1])
          expect(res.body[0])
            .to.have.property('status')
            .and.to.be.a('string')
            .and.to.equal('verified')
          done()
        })
    })
  })
})
